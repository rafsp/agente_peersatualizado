#!/usr/bin/env python3
"""
Script de configura√ß√£o do Backend Agentes Peers
Execute: python setup.py
"""

import os
import sys
import subprocess
from pathlib import Path

def print_banner():
    """Exibe banner do sistema"""
    print("=" * 60)
    print("üöÄ SETUP - BACKEND AGENTES PEERS")
    print("=" * 60)
    print("Sistema de an√°lise de c√≥digo com IA multi-agentes")
    print("Integra√ß√£o: ChatGPT + GitHub + FastAPI")
    print("=" * 60)

def check_python_version():
    """Verifica vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio!")
        print(f"   Vers√£o atual: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} OK")
    return True

def install_dependencies():
    """Instala depend√™ncias do requirements.txt"""
    print("\nüì¶ Instalando depend√™ncias...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def setup_env_file():
    """Configura arquivo .env"""
    print("\n‚öôÔ∏è Configurando arquivo .env...")
    
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    if env_file.exists():
        print("‚ö†Ô∏è Arquivo .env j√° existe!")
        response = input("Deseja sobrescrever? (s/N): ").lower()
        if response != 's':
            print("üìù Mantendo arquivo .env existente.")
            return True
    
    if not env_example.exists():
        print("‚ùå Arquivo .env.example n√£o encontrado!")
        return False
    
    # Copiar .env.example para .env
    with open(env_example, 'r') as f:
        content = f.read()
    
    with open(env_file, 'w') as f:
        f.write(content)
    
    print("‚úÖ Arquivo .env criado!")
    print("üìù IMPORTANTE: Edite o arquivo .env e adicione suas chaves API:")
    print("   - OPENAI_API_KEY (obtenha em: https://platform.openai.com/api-keys)")
    print("   - GITHUB_TOKEN (obtenha em: https://github.com/settings/personal-access-tokens)")
    
    return True

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando estrutura de diret√≥rios...")
    
    dirs_to_create = [
        "logs",
        "data",
        "tools/prompt",
        "agents"
    ]
    
    for dir_path in dirs_to_create:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Diret√≥rio criado: {dir_path}")
    
    return True

def test_setup():
    """Testa a configura√ß√£o b√°sica"""
    print("\nüß™ Testando configura√ß√£o...")
    
    try:
        # Testar importa√ß√µes b√°sicas
        import fastapi
        import openai
        import github
        from dotenv import load_dotenv
        
        print("‚úÖ Importa√ß√µes b√°sicas OK")
        
        # Testar carregamento de .env
        load_dotenv()
        
        openai_key = os.getenv('OPENAI_API_KEY')
        github_token = os.getenv('GITHUB_TOKEN')
        
        if openai_key and openai_key.startswith('sk-'):
            print("‚úÖ OPENAI_API_KEY configurada")
        else:
            print("‚ö†Ô∏è OPENAI_API_KEY n√£o configurada ou inv√°lida")
        
        if github_token and (github_token.startswith('ghp_') or github_token.startswith('github_pat_')):
            print("‚úÖ GITHUB_TOKEN configurada")
        else:
            print("‚ö†Ô∏è GITHUB_TOKEN n√£o configurada ou inv√°lida")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def show_next_steps():
    """Mostra pr√≥ximos passos"""
    print("\n" + "=" * 60)
    print("üéâ SETUP CONCLU√çDO!")
    print("=" * 60)
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. ‚úèÔ∏è Edite o arquivo .env com suas chaves API")
    print("2. üöÄ Execute o backend: python mcp_server_fastapi.py")
    print("3. üåê Execute o frontend: cd frontend && npm run dev")
    print("4. üìñ Acesse a documenta√ß√£o: http://localhost:8000/docs")
    print("\nüí° DICAS:")
    print("‚Ä¢ Mantenha o arquivo .env seguro (nunca commite no Git)")
    print("‚Ä¢ Use gpt-4o-mini para economizar cr√©ditos da OpenAI")
    print("‚Ä¢ Configure rate limits se necess√°rio")
    print("\nüÜò SUPORTE:")
    print("‚Ä¢ Documenta√ß√£o: README.md")
    print("‚Ä¢ Issues: GitHub do projeto")
    print("=" * 60)

def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    # Verifica√ß√µes e setup
    steps = [
        ("Verificar Python", check_python_version),
        ("Instalar depend√™ncias", install_dependencies),
        ("Configurar .env", setup_env_file),
        ("Criar diret√≥rios", create_directories),
        ("Testar configura√ß√£o", test_setup),
    ]
    
    for step_name, step_func in steps:
        print(f"\nüîÑ {step_name}...")
        if not step_func():
            print(f"‚ùå Falha em: {step_name}")
            print("üõë Setup interrompido. Corrija os erros e tente novamente.")
            return False
    
    show_next_steps()
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Setup cancelado pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)