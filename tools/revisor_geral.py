import os
from openai import OpenAI
from typing import Optional
from dotenv import load_dotenv

load_dotenv()

def carregar_prompt(tipo_analise: str) -> str:
    """Carrega prompt do arquivo correspondente"""
    prompt_path = f"prompts/{tipo_analise}.md"
    
    if os.path.exists(prompt_path):
        with open(prompt_path, 'r', encoding='utf-8') as f:
            return f.read()
    else:
        # Prompt padr√£o se arquivo n√£o existir
        prompts_default = {
            "design": """
Voc√™ √© um arquiteto de software s√™nior. Analise o c√≥digo fornecido focando em:

## Aspectos a Analisar:
1. **Princ√≠pios SOLID**
2. **Padr√µes de Design (GoF)**
3. **Arquitetura geral**
4. **Coes√£o e acoplamento**
5. **Escalabilidade**

## Formato da Resposta:
- Problemas identificados
- Recomenda√ß√µes espec√≠ficas
- C√≥digo refatorado (quando aplic√°vel)
- Prioridade das mudan√ßas
""",
            "refatoracao": """
Voc√™ √© um especialista em refatora√ß√£o. Aplique as seguintes melhorias:

## Objetivos:
1. Aplicar princ√≠pios SOLID
2. Remover code smells
3. Melhorar legibilidade
4. Otimizar performance
5. Adicionar documenta√ß√£o

## Entrega:
- C√≥digo refatorado completo
- Explica√ß√£o das mudan√ßas
- Benef√≠cios obtidos
""",
            "escrever_testes": """
Voc√™ √© um especialista em testes. Crie testes abrangentes para o c√≥digo:

## Requisitos:
1. Cobertura de casos normais
2. Casos de borda
3. Tratamento de erros
4. Mocks quando necess√°rio
5. Framework pytest

## Estrutura:
- Testes organizados por classe/fun√ß√£o
- Nomes descritivos
- AAA pattern (Arrange, Act, Assert)
""",
            "pentest": """
Voc√™ √© um especialista em seguran√ßa ofensiva. Analise o c√≥digo em busca de:

## Vulnerabilidades:
1. Inje√ß√£o de c√≥digo (SQL, XSS, etc.)
2. Autentica√ß√£o e autoriza√ß√£o
3. Exposi√ß√£o de dados sens√≠veis
4. Configura√ß√µes inseguras
5. Depend√™ncias vulner√°veis

## Relat√≥rio:
- Vulnerabilidades encontradas
- N√≠vel de risco
- Explora√ß√£o poss√≠vel
- Corre√ß√µes recomendadas
""",
            "seguranca": """
Voc√™ √© um especialista em seguran√ßa defensiva. Analise o c√≥digo focando em:

## Aspectos de Seguran√ßa:
1. Valida√ß√£o de entrada
2. Sanitiza√ß√£o de dados
3. Controle de acesso
4. Criptografia
5. Logs de seguran√ßa

## Relat√≥rio:
- Problemas de seguran√ßa
- Boas pr√°ticas n√£o seguidas
- Melhorias recomendadas
- C√≥digo corrigido
""",
            "terraform": """
Voc√™ √© um especialista em Terraform e Infrastructure as Code. Analise o c√≥digo focando em:

## Aspectos Terraform:
1. Boas pr√°ticas de IaC
2. Seguran√ßa de recursos
3. Organiza√ß√£o de m√≥dulos
4. Estado e versionamento
5. Efici√™ncia de custos

## Relat√≥rio:
- Problemas identificados
- Melhorias de seguran√ßa
- Otimiza√ß√µes de custo
- C√≥digo corrigido
""",
            "agrupamento_design": """
Voc√™ √© um especialista em organiza√ß√£o de c√≥digo. Agrupe as mudan√ßas de design em commits l√≥gicos:

## Objetivo:
Organizar mudan√ßas em grupos tem√°ticos para commits mais limpos

## Agrupamentos sugeridos:
1. Refatora√ß√µes de arquitetura
2. Aplica√ß√£o de padr√µes
3. Melhorias de performance
4. Documenta√ß√£o

## Sa√≠da:
- Grupos de mudan√ßas
- Mensagens de commit sugeridas
- Ordem de aplica√ß√£o
""",
            "agrupamento_testes": """
Voc√™ √© um especialista em organiza√ß√£o de testes. Agrupe os testes em estrutura l√≥gica:

## Objetivo:
Organizar testes em grupos coerentes e estrutura clara

## Agrupamentos:
1. Testes unit√°rios por m√≥dulo
2. Testes de integra√ß√£o
3. Testes de borda
4. Fixtures e mocks

## Sa√≠da:
- Estrutura de pastas
- Organiza√ß√£o por funcionalidade
- Configura√ß√£o de testes
"""
        }
        
        return prompts_default.get(tipo_analise, f"""
Voc√™ √© um especialista em an√°lise de c√≥digo. 
Analise o c√≥digo fornecido com foco em: {tipo_analise}

Forne√ßa um relat√≥rio detalhado com:
1. Problemas identificados
2. Recomenda√ß√µes de melhoria
3. Boas pr√°ticas sugeridas
4. C√≥digo refatorado (se aplic√°vel)
""")

def executar_analise_llm(tipo_analise: str,
                        codigo: str,
                        analise_extra: str = "",
                        model_name: str = "gpt-4",  # Mudei para gpt-4 padr√£o
                        max_token_out: int = 3000) -> str:
    """Executa an√°lise usando OpenAI v1.0+"""
    
    try:
        # Inicializar cliente OpenAI v1.0+
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("OPENAI_API_KEY n√£o encontrada no .env")
        
        client = OpenAI(api_key=api_key)
        
        # Verificar modelo dispon√≠vel
        models_available = ["gpt-4", "gpt-3.5-turbo", "gpt-4-turbo-preview"]
        if model_name not in models_available:
            print(f"‚ö†Ô∏è Modelo {model_name} n√£o reconhecido, usando gpt-4")
            model_name = "gpt-4"
        
        # Carregar prompt
        prompt_base = carregar_prompt(tipo_analise)
        
        # Construir prompt completo
        prompt_completo = f"""
{prompt_base}

INSTRU√á√ïES EXTRAS DO USU√ÅRIO:
{analise_extra}

C√ìDIGO PARA AN√ÅLISE:
```
{codigo}
```

Por favor, forne√ßa uma an√°lise detalhada seguindo as diretrizes acima.
"""
        
        print(f"ü§ñ Enviando para OpenAI (modelo: {model_name})")
        print(f"üìÑ Tamanho do c√≥digo: {len(codigo)} caracteres")
        print(f"üéØ Tipo de an√°lise: {tipo_analise}")
        
        # Fazer chamada para OpenAI usando a nova API v1.0+
        response = client.chat.completions.create(
            model=model_name,
            messages=[
                {
                    "role": "system", 
                    "content": "Voc√™ √© um especialista s√™nior em an√°lise de c√≥digo, arquitetura de software e seguran√ßa. Forne√ßa an√°lises detalhadas e pr√°ticas."
                },
                {
                    "role": "user", 
                    "content": prompt_completo
                }
            ],
            max_tokens=max_token_out,
            temperature=0.3
        )
        
        resultado = response.choices[0].message.content
        print("‚úÖ An√°lise conclu√≠da com sucesso")
        print(f"üìä Tamanho do resultado: {len(resultado)} caracteres")
        
        return resultado
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise LLM: {e}")
        
        # Tentar com modelo alternativo em caso de erro
        if "gpt-4" in model_name and "gpt-4" != model_name:
            print("üîÑ Tentando novamente com gpt-4...")
            return executar_analise_llm(tipo_analise, codigo, analise_extra, "gpt-4", max_token_out)
        elif model_name == "gpt-4":
            print("üîÑ Tentando novamente com gpt-3.5-turbo...")
            return executar_analise_llm(tipo_analise, codigo, analise_extra, "gpt-3.5-turbo", max_token_out)
        else:
            raise

# Fun√ß√£o para compatibilidade com c√≥digo legado
def main(*args, **kwargs):
    """Fun√ß√£o para compatibilidade"""
    return executar_analise_llm(*args, **kwargs)