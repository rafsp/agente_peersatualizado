# tools/revisor_geral.py - CORRE√á√ÉO APENAS DO TRATAMENTO DE RESPOSTA
import os
from openai import OpenAI
from typing import Dict

def get_openai_key():
    """Obt√©m chave OpenAI de forma robusta"""
    # Primeiro tenta vari√°veis de ambiente
    key = os.getenv('OPENAI_API_KEY') or os.getenv('OPENAI_KEY')
    
    if not key:
        # S√≥ tenta Google Colab se dispon√≠vel
        try:
            from google.colab import userdata
            key = userdata.get('OPENAI_API_KEY')
        except ImportError:
            # N√£o est√° no Colab - normal
            pass
        except Exception:
            # Erro no Colab - continua
            pass
    
    if not key:
        raise ValueError("A chave da API da OpenAI n√£o foi encontrada. Defina a vari√°vel de ambiente OPENAI_API_KEY.")
    
    return key

# Inicializar cliente OpenAI
OPENAI_API_KEY = get_openai_key()
openai_client = OpenAI(api_key=OPENAI_API_KEY)

def carregar_prompt(tipo_analise: str) -> str:
    """Carrega o conte√∫do do arquivo de prompt correspondente."""
    caminho_prompt = os.path.join(os.path.dirname(__file__), 'prompts', f'{tipo_analise}.md')
    try:
        with open(caminho_prompt, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        # Prompt padr√£o caso arquivo n√£o encontrado
        return f"""
Voc√™ √© um especialista em an√°lise de c√≥digo para o tipo '{tipo_analise}'.
Analise o c√≥digo fornecido e forne√ßa um relat√≥rio detalhado com:

1. **Principais problemas identificados**
2. **Recomenda√ß√µes de melhoria**  
3. **Boas pr√°ticas aplic√°veis**
4. **Pr√≥ximos passos sugeridos**

Seja espec√≠fico e pr√°tico nas suas recomenda√ß√µes.
"""

def executar_analise_llm(
    tipo_analise: str,
    codigo: str,
    analise_extra: str,
    model_name: str,
    max_token_out: int
) -> str:
    """
    Executa an√°lise usando LLM da OpenAI com tratamento robusto da resposta.
    """
    
    prompt_sistema = carregar_prompt(tipo_analise)

    mensagens = [
        {"role": "system", "content": prompt_sistema},
        {'role': 'user', 'content': codigo},
        {
            'role': 'user', 
            'content': f'Instru√ß√µes extras do usu√°rio a serem consideradas na an√°lise: {analise_extra}' if analise_extra and analise_extra.strip() else 'Nenhuma instru√ß√£o extra fornecida pelo usu√°rio.'
        }
    ]

    try:
        print(f"ü§ñ Fazendo chamada para OpenAI...")
        print(f"üìä Modelo: {model_name}")
        print(f"üî§ Max tokens: {max_token_out}")
        print(f"üìù Tamanho do c√≥digo: {len(codigo)} caracteres")
        
        response = openai_client.chat.completions.create(
            model=model_name,
            messages=mensagens,
            temperature=0.5,
            max_tokens=max_token_out
        )
        
        print(f"‚úÖ Resposta recebida da OpenAI")
        
        # CORRE√á√ÉO: Tratamento robusto da resposta
        if not response:
            print("‚ùå Response √© None")
            raise RuntimeError("Resposta vazia da API OpenAI")
        
        if not response.choices:
            print("‚ùå Response.choices est√° vazio")
            raise RuntimeError("Nenhuma escolha na resposta da OpenAI")
        
        choice = response.choices[0]
        if not choice:
            print("‚ùå Choice √© None")
            raise RuntimeError("Primeira escolha √© None")
        
        if not choice.message:
            print("‚ùå Choice.message √© None")
            raise RuntimeError("Mensagem da escolha √© None")
        
        conteudo_resposta = choice.message.content
        print(f"üìÑ Conteudo recebido: {type(conteudo_resposta)}")
        
        # CORRE√á√ÉO PRINCIPAL: Verificar se conteudo_resposta √© None antes de fazer strip()
        if conteudo_resposta is None:
            print("‚ùå conteudo_resposta √© None - este √© o problema!")
            raise RuntimeError("Conte√∫do da resposta √© None")
        
        # Agora √© seguro fazer strip()
        resultado_final = conteudo_resposta.strip()
        
        if not resultado_final:
            print("‚ö†Ô∏è Resultado final est√° vazio ap√≥s strip")
            resultado_final = "An√°lise conclu√≠da, mas resposta vazia. Tente novamente."
        
        print(f"‚úÖ An√°lise conclu√≠da! Resposta: {len(resultado_final)} caracteres")
        return resultado_final
        
    except Exception as e:
        error_msg = f"ERRO: Falha na chamada √† API da OpenAI para an√°lise '{tipo_analise}'. Causa: {e}"
        print(error_msg)
        raise RuntimeError(f"Erro ao comunicar com a OpenAI: {e}") from e