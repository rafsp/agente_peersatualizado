from typing import Optional, Dict, Any
import sys
import os

# Adicionar diret√≥rio pai ao path para importa√ß√µes
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tools import github_reader
from tools.revisor_geral import executar_analise_llm

# Configura√ß√µes padr√£o
modelo_llm = 'gpt-4o-mini'  # Modelo mais econ√¥mico
max_tokens_saida = 3000

# An√°lises v√°lidas (mapeamento do frontend para backend)
analises_validas = ["design", "pentest", "seguranca", "terraform"]

def code_from_repo(repositorio: str, tipo_analise: str) -> Dict[str, str]:
    """
    Obt√©m c√≥digo do reposit√≥rio GitHub
    
    Args:
        repositorio: Nome do repo no formato "usuario/repo" 
        tipo_analise: Tipo de an√°lise para filtrar arquivos
        
    Returns:
        Dicion√°rio com arquivos do reposit√≥rio
    """
    try:
        print(f'üîç Iniciando leitura do reposit√≥rio: {repositorio}')
        codigo_para_analise = github_reader.main(
            repo=repositorio,
            tipo_de_analise=tipo_analise
        )
        
        if not codigo_para_analise:
            print("‚ö†Ô∏è Nenhum arquivo encontrado no reposit√≥rio")
            return {}
        
        print(f"‚úÖ {len(codigo_para_analise)} arquivos obtidos do reposit√≥rio")
        return codigo_para_analise

    except Exception as e:
        error_msg = f"Falha ao executar a an√°lise de '{tipo_analise}' no repo '{repositorio}': {e}"
        print(f"‚ùå {error_msg}")
        raise RuntimeError(error_msg) from e

def validation(tipo_analise: str,
               repositorio: Optional[str] = None,
               codigo: Optional[str] = None) -> str:
    """
    Valida par√¢metros e obt√©m c√≥digo para an√°lise
    
    Args:
        tipo_analise: Tipo de an√°lise
        repositorio: URL/nome do reposit√≥rio (opcional)
        codigo: C√≥digo direto (opcional)
        
    Returns:
        C√≥digo formatado para an√°lise
    """
    # Validar tipo de an√°lise
    if tipo_analise not in analises_validas:
        raise ValueError(f"Tipo de an√°lise '{tipo_analise}' √© inv√°lido. V√°lidos: {analises_validas}")

    # Validar que pelo menos uma fonte foi fornecida
    if repositorio is None and codigo is None:
        raise ValueError("Erro: √â obrigat√≥rio fornecer 'repositorio' ou 'codigo'.")

    # Obter c√≥digo
    if codigo is None:
        # Obter c√≥digo do reposit√≥rio
        arquivos_repo = code_from_repo(tipo_analise=tipo_analise, repositorio=repositorio)
        
        if not arquivos_repo:
            return ""
        
        # Formatar c√≥digo como dicion√°rio Python para o prompt
        codigo_formatado = "{\n"
        for caminho, conteudo in arquivos_repo.items():
            # Escapar aspas no conte√∫do
            conteudo_escaped = conteudo.replace('"""', '\\"\\"\\"').replace("'''", "\\'\\'\\'")
            codigo_formatado += f'    "{caminho}": """{conteudo_escaped}""",\n'
        codigo_formatado += "}"
        
        return codigo_formatado
    else:
        # Usar c√≥digo fornecido diretamente
        return codigo

def main(tipo_analise: str,
         repositorio: Optional[str] = None,
         codigo: Optional[str] = None,
         instrucoes_extras: str = "",
         model_name: str = modelo_llm,
         max_token_out: int = max_tokens_saida) -> Dict[str, Any]:
    """
    Fun√ß√£o principal para executar an√°lise de c√≥digo
    
    Args:
        tipo_analise: Tipo de an√°lise ('design', 'pentest', 'seguranca', 'terraform')
        repositorio: Nome do reposit√≥rio (formato: "usuario/repo")
        codigo: C√≥digo direto para an√°lise (opcional)
        instrucoes_extras: Instru√ß√µes adicionais do usu√°rio
        model_name: Modelo da OpenAI a usar
        max_token_out: M√°ximo de tokens na resposta
        
    Returns:
        Dicion√°rio com resultado da an√°lise
    """
    print(f"üöÄ Iniciando an√°lise de {tipo_analise}")
    print(f"üìä Modelo: {model_name} | Max tokens: {max_token_out}")
    
    try:
        # Validar e obter c√≥digo
        codigo_para_analise = validation(
            tipo_analise=tipo_analise,
            repositorio=repositorio,
            codigo=codigo
        )
        
        if not codigo_para_analise or codigo_para_analise.strip() == "":
            resultado_vazio = "N√£o foi fornecido nenhum c√≥digo para an√°lise ou reposit√≥rio est√° vazio."
            print(f"‚ö†Ô∏è {resultado_vazio}")
            return {
                "tipo_analise": tipo_analise,
                "repositorio": repositorio,
                "resultado": resultado_vazio,
                "status": "empty"
            }
        
        print(f"üìù C√≥digo obtido: {len(codigo_para_analise)} caracteres")
        
        # Executar an√°lise com IA
        print("ü§ñ Enviando para an√°lise com IA...")
        resultado = executar_analise_llm(
            tipo_analise=tipo_analise,
            codigo=str(codigo_para_analise),
            analise_extra=instrucoes_extras,
            model_name=model_name,
            max_token_out=max_token_out
        )
        
        print("‚úÖ An√°lise conclu√≠da com sucesso!")
        
        return {
            "tipo_analise": tipo_analise,
            "repositorio": repositorio,
            "resultado": resultado,
            "status": "success",
            "model_used": model_name,
            "instructions_extra": instrucoes_extras
        }
        
    except Exception as e:
        error_msg = f"Erro na an√°lise: {str(e)}"
        print(f"‚ùå {error_msg}")
        
        return {
            "tipo_analise": tipo_analise,
            "repositorio": repositorio,
            "resultado": f"Erro durante a an√°lise: {error_msg}",
            "status": "error",
            "error_details": str(e)
        }

# Fun√ß√£o de compatibilidade (nome antigo)
def executar_analise(*args, **kwargs):
    """Fun√ß√£o de compatibilidade - usa main()"""
    return main(*args, **kwargs)

if __name__ == "__main__":
    # Teste b√°sico
    print("üß™ Testando agente revisor...")
    
    # Exemplo de teste com reposit√≥rio p√∫blico pequeno
    try:
        resultado = main(
            tipo_analise="design",
            repositorio="octocat/Hello-World",
            instrucoes_extras="Foque na estrutura b√°sica do projeto"
        )
        
        print("üìã Resultado do teste:")
        print(f"Status: {resultado['status']}")
        print(f"Tipo: {resultado['tipo_analise']}")
        if resultado['status'] == 'success':
            print(f"Resultado: {resultado['resultado'][:200]}...")  # Primeiros 200 chars
        else:
            print(f"Erro: {resultado['resultado']}")
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        print("üí° Verifique se as chaves API est√£o configuradas em .env")