# mcp_server_fastapi.py - BACKEND COM AGENTES REAIS (SEM SIMULA√á√ÉO)

import json
import uuid
import time
import asyncio
import threading
from typing import Optional, Literal, Dict, Any
from fastapi import FastAPI, BackgroundTasks, HTTPException, Path
from pydantic import BaseModel, Field
from fastapi.middleware.cors import CORSMiddleware
import os
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# IMPORTS DOS AGENTES REAIS - OBRIGAT√ìRIOS
try:
    from agents import agente_revisor
    from tools import preenchimento, commit_multiplas_branchs
    AGENTS_AVAILABLE = True
    print("‚úÖ Agentes reais carregados com sucesso")
    
    # Verificar depend√™ncias cr√≠ticas
    import openai
    import github
    print("‚úÖ Depend√™ncias OpenAI e GitHub dispon√≠veis")
    
    # Verificar vari√°veis de ambiente
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ö†Ô∏è  OPENAI_API_KEY n√£o encontrada no .env")
        AGENTS_AVAILABLE = False
    if not os.getenv('GITHUB_TOKEN'):
        print("‚ö†Ô∏è  GITHUB_TOKEN n√£o encontrada no .env")
        AGENTS_AVAILABLE = False
        
    if AGENTS_AVAILABLE:
        print("‚úÖ Configura√ß√£o completa para agentes reais")
    else:
        print("‚ùå Configura√ß√£o incompleta - verifique .env")
        
except ImportError as e:
    print(f"‚ùå ERRO CR√çTICO: Agentes n√£o encontrados: {e}")
    print("‚ùå Execute: pip install PyGithub openai python-dotenv")
    print("‚ùå Verifique se os arquivos dos agentes existem:")
    print("   - agents/agente_revisor.py")
    print("   - tools/github_reader.py") 
    print("   - tools/revisor_geral.py")
    AGENTS_AVAILABLE = False
    exit(1)  # PARAR EXECU√á√ÉO - AGENTES S√ÉO OBRIGAT√ìRIOS

# --- Modelos de Dados ---
class StartAnalysisRequest(BaseModel):
    repo_name: str = Field(..., description="Nome do reposit√≥rio GitHub (formato: owner/repo)")
    analysis_type: Literal["design", "relatorio_teste_unitario"] = Field(..., description="Tipo de an√°lise")
    branch_name: Optional[str] = Field(None, description="Branch espec√≠fica (opcional)")
    instrucoes_extras: Optional[str] = Field(None, description="Instru√ß√µes adicionais")

class UpdateJobRequest(BaseModel):
    job_id: str = Field(..., description="ID do job")
    action: Literal["approve", "reject"] = Field(..., description="A√ß√£o a ser executada")

class JobStatusResponse(BaseModel):
    job_id: str
    status: str
    message: str
    progress: int
    error_details: Optional[str] = None
    last_updated: float

class StartAnalysisResponse(BaseModel):
    job_id: str
    report: str
    status: str

# --- Configura√ß√£o do FastAPI ---
app = FastAPI(
    title="Agentes Peers - Backend com IA Real",
    description="Sistema de an√°lise de c√≥digo com IA multi-agentes (SEM SIMULA√á√ÉO)",
    version="3.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configura√ß√£o CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:3001",
        "https://your-frontend-domain.com"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Armazenamento em mem√≥ria dos jobs
jobs: Dict[str, Dict[str, Any]] = {}

# --- WORKFLOW REGISTRY COM AGENTES REAIS ---
WORKFLOW_REGISTRY = {
    "design": {
        "description": "An√°lise de design e refatora√ß√£o usando agentes reais",
        "agent_analysis_type": "design",  # Tipo para an√°lise inicial
        "steps": [
            {
                "status": "refactoring_code", 
                "message": "Executando refatora√ß√£o com IA...", 
                "agent_type": "refatoracao",
                "duration": 15
            },
            {
                "status": "grouping_commits", 
                "message": "Organizando commits por tema...", 
                "agent_type": "agrupamento_design",
                "duration": 8
            },
            {
                "status": "populating_data", 
                "message": "Aplicando mudan√ßas no c√≥digo...", 
                "agent_type": None,  # Usar ferramenta de preenchimento
                "duration": 10
            },
            {
                "status": "committing_to_github", 
                "message": "Criando commits organizados...", 
                "agent_type": None,  # Usar ferramenta de commit
                "duration": 12
            }
        ]
    },
    "relatorio_teste_unitario": {
        "description": "Gera√ß√£o de testes unit√°rios usando agentes reais",
        "agent_analysis_type": "design",  # An√°lise inicial para entender c√≥digo
        "steps": [
            {
                "status": "writing_unit_tests", 
                "message": "Gerando testes unit√°rios com IA...", 
                "agent_type": "escrever_testes",
                "duration": 20
            },
            {
                "status": "grouping_tests", 
                "message": "Organizando estrutura de testes...", 
                "agent_type": "agrupamento_testes",
                "duration": 8
            },
            {
                "status": "populating_data", 
                "message": "Aplicando testes no projeto...", 
                "agent_type": None,
                "duration": 10
            },
            {
                "status": "committing_to_github", 
                "message": "Commitando testes organizados...", 
                "agent_type": None,
                "duration": 10
            }
        ]
    }
}

# --- Fun√ß√µes dos Agentes Reais ---

async def execute_real_analysis_step(job_id: str, step: Dict[str, Any], job_data: Dict[str, Any]) -> Dict[str, Any]:
    """Executa uma etapa real da an√°lise usando os agentes"""
    try:
        print(f"[{job_id}] Executando etapa: {step['status']}")
        
        if step.get("agent_type"):
            # Executar agente real
            print(f"[{job_id}] Chamando agente: {step['agent_type']}")
            
            resultado = agente_revisor.main(
                tipo_analise=step["agent_type"],
                repositorio=job_data["repo_name"],
                nome_branch=job_data.get("branch_name"),
                instrucoes_extras=job_data.get("instrucoes_extras", "")
            )
            
            print(f"[{job_id}] ‚úÖ Agente executado com sucesso")
            return {
                "status": "success",
                "result": resultado,
                "message": f"Etapa {step['status']} conclu√≠da com agente {step['agent_type']}"
            }
            
        else:
            # Executar ferramenta espec√≠fica
            if step["status"] == "populating_data":
                print(f"[{job_id}] Aplicando mudan√ßas com ferramenta de preenchimento")
                resultado = preenchimento.main()
                
            elif step["status"] == "committing_to_github":
                print(f"[{job_id}] Criando commits com ferramenta de commit")
                resultado = commit_multiplas_branchs.main()
                
            else:
                resultado = {"status": "completed", "message": "Etapa processada"}
            
            print(f"[{job_id}] ‚úÖ Ferramenta executada com sucesso")
            return {
                "status": "success", 
                "result": resultado,
                "message": f"Etapa {step['status']} conclu√≠da"
            }
            
    except Exception as e:
        print(f"[{job_id}] ‚ùå Erro na etapa {step['status']}: {e}")
        return {
            "status": "error",
            "error": str(e),
            "message": f"Falha na etapa {step['status']}"
        }

async def execute_full_workflow(job_id: str):
    """Executa workflow completo com agentes reais"""
    if not AGENTS_AVAILABLE:
        print(f"[{job_id}] ‚ùå Agentes n√£o dispon√≠veis")
        jobs[job_id].update({
            "status": "failed",
            "message": "Agentes n√£o dispon√≠veis - configure .env",
            "progress": 0,
            "last_updated": time.time()
        })
        return
    
    try:
        job = jobs.get(job_id)
        if not job:
            print(f"[{job_id}] ‚ùå Job n√£o encontrado")
            return
        
        workflow = WORKFLOW_REGISTRY.get(job["analysis_type"])
        if not workflow:
            raise ValueError(f"Workflow n√£o encontrado: {job['analysis_type']}")
        
        print(f"[{job_id}] üöÄ Iniciando workflow: {workflow['description']}")
        
        total_steps = len(workflow["steps"])
        progress_per_step = 75 / total_steps  # 75% restante dividido pelas etapas
        current_progress = 25  # Come√ßa em 25% ap√≥s aprova√ß√£o
        
        # Executar cada etapa
        for i, step in enumerate(workflow["steps"]):
            if job_id not in jobs:
                print(f"[{job_id}] ‚ö†Ô∏è Job removido durante execu√ß√£o")
                break
            
            # Atualizar status
            current_progress += progress_per_step
            jobs[job_id].update({
                "status": step["status"],
                "message": step["message"],
                "progress": int(current_progress),
                "last_updated": time.time()
            })
            
            print(f"[{job_id}] {step['status']}: {step['message']} ({int(current_progress)}%)")
            
            # Executar etapa real
            resultado_etapa = await execute_real_analysis_step(job_id, step, job)
            
            if resultado_etapa["status"] == "error":
                # Falha na etapa
                jobs[job_id].update({
                    "status": "failed",
                    "message": f"Falha: {resultado_etapa['message']}",
                    "progress": int(current_progress),
                    "error_details": resultado_etapa.get("error"),
                    "last_updated": time.time()
                })
                print(f"[{job_id}] ‚ùå Workflow falhou na etapa {step['status']}")
                return
            
            # Simular tempo de processamento real
            await asyncio.sleep(min(step["duration"], 5))  # M√°ximo 5s por etapa para demo
        
        # Finalizar com sucesso
        if job_id in jobs:
            jobs[job_id].update({
                "status": "completed",
                "message": "An√°lise conclu√≠da com agentes reais!",
                "progress": 100,
                "last_updated": time.time()
            })
            print(f"[{job_id}] ‚úÖ Workflow conclu√≠do com sucesso")
        
    except Exception as e:
        print(f"[{job_id}] ‚ùå Erro no workflow: {e}")
        if job_id in jobs:
            jobs[job_id].update({
                "status": "failed",
                "message": f"Erro na execu√ß√£o: {str(e)}",
                "progress": 0,
                "error_details": str(e),
                "last_updated": time.time()
            })

def generate_initial_report(repo_name: str, analysis_type: str, instrucoes_extras: str = "") -> str:
    """Gera relat√≥rio inicial usando agente real"""
    if not AGENTS_AVAILABLE:
        return "‚ùå Agentes n√£o dispon√≠veis. Configure OPENAI_API_KEY e GITHUB_TOKEN no .env"
    
    try:
        print(f"ü§ñ Gerando relat√≥rio inicial para {repo_name} (tipo: {analysis_type})")
        
        # Usar agente real para an√°lise inicial
        workflow = WORKFLOW_REGISTRY.get(analysis_type)
        agent_type = workflow.get("agent_analysis_type", "design")
        
        resultado = agente_revisor.main(
            tipo_analise=agent_type,
            repositorio=repo_name,
            instrucoes_extras=instrucoes_extras or "An√°lise inicial para aprova√ß√£o"
        )
        
        # Extrair relat√≥rio do resultado
        if resultado and "resultado" in resultado:
            if isinstance(resultado["resultado"], dict) and "reposta_final" in resultado["resultado"]:
                return resultado["resultado"]["reposta_final"]
            elif isinstance(resultado["resultado"], str):
                return resultado["resultado"]
        
        return "Relat√≥rio gerado com sucesso. C√≥digo analisado e pronto para processamento."
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rio inicial: {e}")
        return f"‚ùå Erro na an√°lise inicial: {str(e)}\n\nVerifique:\n- OPENAI_API_KEY no .env\n- GITHUB_TOKEN no .env\n- Acesso ao reposit√≥rio {repo_name}"

# --- Endpoints da API ---

@app.get("/")
async def root():
    return {
        "message": "Backend Agentes Peers com IA Real funcionando!",
        "version": "3.0.0",
        "status": "ok",
        "agents_status": "real_agents" if AGENTS_AVAILABLE else "no_agents",
        "environment": os.getenv("ENVIRONMENT", "development")
    }

@app.get("/health")
async def health_check():
    status = "healthy" if AGENTS_AVAILABLE else "unhealthy"
    return {
        "status": status,
        "message": "Backend funcionando com agentes reais" if AGENTS_AVAILABLE else "Agentes n√£o dispon√≠veis",
        "environment": os.getenv("ENVIRONMENT", "development"),
        "agents_available": AGENTS_AVAILABLE,
        "openai_configured": bool(os.getenv('OPENAI_API_KEY')),
        "github_configured": bool(os.getenv('GITHUB_TOKEN'))
    }

@app.post("/start-analysis", response_model=StartAnalysisResponse)
async def start_analysis(request: StartAnalysisRequest):
    """Inicia uma nova an√°lise usando agentes reais"""
    try:
        # Validar entrada
        if not request.repo_name.strip():
            raise HTTPException(status_code=400, detail="Nome do reposit√≥rio √© obrigat√≥rio")
        
        if not AGENTS_AVAILABLE:
            raise HTTPException(
                status_code=503, 
                detail="Agentes n√£o dispon√≠veis. Configure OPENAI_API_KEY e GITHUB_TOKEN no .env"
            )
        
        # Criar novo job
        job_id = str(uuid.uuid4())
        
        print(f"üéØ Iniciando an√°lise real: {job_id} - {request.analysis_type} - {request.repo_name}")
        
        # Gerar relat√≥rio inicial usando agente real
        report = generate_initial_report(
            request.repo_name, 
            request.analysis_type, 
            request.instrucoes_extras
        )
        
        # Criar job no armazenamento
        jobs[job_id] = {
            "job_id": job_id,
            "repo_name": request.repo_name,
            "analysis_type": request.analysis_type,
            "branch_name": request.branch_name,
            "instrucoes_extras": request.instrucoes_extras,
            "status": "pending_approval",
            "message": "Relat√≥rio gerado com IA real. Aguardando aprova√ß√£o...",
            "progress": 10,
            "report": report,
            "created_at": time.time(),
            "last_updated": time.time()
        }
        
        print(f"‚úÖ An√°lise criada: {job_id} - {request.analysis_type} - {request.repo_name}")
        
        return StartAnalysisResponse(
            job_id=job_id,
            report=report,
            status="pending_approval"
        )
        
    except Exception as e:
        print(f"‚ùå Erro ao criar an√°lise: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/status/{job_id}", response_model=JobStatusResponse)
async def get_job_status(job_id: str = Path(..., description="ID do job")):
    """Obt√©m o status atual de um job"""
    if job_id not in jobs:
        raise HTTPException(status_code=404, detail="Job n√£o encontrado")
    
    job = jobs[job_id]
    return JobStatusResponse(
        job_id=job["job_id"],
        status=job["status"],
        message=job["message"],
        progress=job["progress"],
        error_details=job.get("error_details"),
        last_updated=job["last_updated"]
    )

@app.post("/update-job-status")
async def update_job_status(request: UpdateJobRequest, background_tasks: BackgroundTasks):
    """Aprova ou rejeita um job para execu√ß√£o com agentes reais"""
    if request.job_id not in jobs:
        raise HTTPException(status_code=404, detail="Job n√£o encontrado")
    
    job = jobs[request.job_id]
    
    if request.action == "approve":
        if not AGENTS_AVAILABLE:
            raise HTTPException(
                status_code=503, 
                detail="Agentes n√£o dispon√≠veis para execu√ß√£o"
            )
        
        # Atualizar status para aprovado
        jobs[request.job_id].update({
            "status": "approved",
            "message": "An√°lise aprovada! Iniciando processamento com agentes reais...",
            "progress": 25,
            "last_updated": time.time()
        })
        
        # Iniciar execu√ß√£o real em background
        # background_tasks.add_task(execute_full_workflow, request.job_id)

        background_tasks.add_task(run_workflow_task_REAL, request.job_id)
        
        print(f"‚úÖ Job aprovado para execu√ß√£o real: {request.job_id}")
        
        return {
            "job_id": request.job_id,
            "status": "approved",
            "message": "An√°lise aprovada e iniciada com agentes reais"
        }
    
    elif request.action == "reject":
        jobs[request.job_id].update({
            "status": "rejected",
            "message": "An√°lise rejeitada pelo usu√°rio",
            "progress": 0,
            "last_updated": time.time()
        })
        
        print(f"‚ùå Job rejeitado: {request.job_id}")
        
        return {
            "job_id": request.job_id,
            "status": "rejected",
            "message": "An√°lise rejeitada"
        }

@app.get("/jobs")
async def list_jobs():
    """Lista todos os jobs"""
    return {
        "jobs": list(jobs.values()),
        "total": len(jobs),
        "agents_available": AGENTS_AVAILABLE
    }

@app.delete("/jobs/{job_id}")
async def delete_job(job_id: str):
    """Remove um job"""
    if job_id not in jobs:
        raise HTTPException(status_code=404, detail="Job n√£o encontrado")
    
    del jobs[job_id]
    print(f"üóëÔ∏è Job removido: {job_id}")
    return {"message": "Job removido com sucesso"}

# --- Executar Servidor ---
if __name__ == "__main__":
    if not AGENTS_AVAILABLE:
        print("‚ùå ERRO: N√£o √© poss√≠vel iniciar sem agentes configurados!")
        print("‚ùå Configure .env com OPENAI_API_KEY e GITHUB_TOKEN")
        exit(1)
        
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000, reload=True)

 # Patch para mcp_server_fastapi.py - ADICIONE ESTA FUN√á√ÉO DEBUG

def run_workflow_task_debug(job_id: str):
    """Vers√£o debug do workflow com logs detalhados"""
    try:
        print(f"[{job_id}] üöÄ INICIANDO WORKFLOW DEBUG")
        job_info = jobs[job_id]
        original_analysis_type = job_info['data']['original_analysis_type']
        workflow = WORKFLOW_REGISTRY.get(original_analysis_type)
        
        if not workflow: 
            raise ValueError(f"Nenhum workflow definido para: {original_analysis_type}")
        
        resultado_refatoracao, resultado_agrupamento = None, None
        previous_step_result = None
        
        # ETAPA 1: Executar agentes
        for i, step in enumerate(workflow['steps']):
            job_info['status'] = step['status_update']
            print(f"[{job_id}] üìù Executando etapa {i+1}: {job_info['status']}")
            
            agent_params = step['params'].copy()
            
            if i == 0:
                relatorio_gerado = job_info['data']['analysis_report']
                instrucoes_usuario = job_info['data'].get('instrucoes_extras')
                
                instrucoes_completas = relatorio_gerado
                if instrucoes_usuario:
                    instrucoes_completas += f"\n\n--- INSTRU√á√ïES ADICIONAIS DO USU√ÅRIO ---\n{instrucoes_usuario}"
                
                agent_params.update({
                    'repositorio': job_info['data']['repo_name'],
                    'nome_branch': job_info['data']['branch_name'],
                    'instrucoes_extras': instrucoes_completas
                })
            else:
                agent_params['codigo'] = str(previous_step_result)
            
            print(f"[{job_id}] ü§ñ Chamando agente: {agent_params.get('tipo_analise')}")
            agent_response = step['agent_function'](**agent_params)
            
            # DEBUG: Log da resposta do agente
            print(f"[{job_id}] üìÑ Resposta do agente: {len(str(agent_response))} caracteres")
            print(f"[{job_id}] üîç Tipo de resposta: {type(agent_response)}")
            print(f"[{job_id}] üîç Chaves da resposta: {list(agent_response.keys()) if isinstance(agent_response, dict) else 'N/A'}")
            
            # Verificar se temos 'resultado' na resposta
            if 'resultado' not in agent_response:
                print(f"[{job_id}] ‚ùå ERRO: Resposta do agente n√£o tem chave 'resultado'")
                print(f"[{job_id}] üìÑ Conte√∫do completo: {agent_response}")
                raise ValueError("Resposta do agente malformada")
            
            resultado_texto = agent_response['resultado']
            print(f"[{job_id}] üìù Resultado texto: {len(str(resultado_texto))} caracteres")
            
            # Verificar se precisa extrair 'reposta_final'
            if isinstance(resultado_texto, dict) and 'reposta_final' in resultado_texto:
                json_string = resultado_texto['reposta_final']
                print(f"[{job_id}] üîç Extraindo de 'reposta_final': {len(str(json_string))} caracteres")
            else:
                json_string = str(resultado_texto)
                print(f"[{job_id}] üîç Usando resultado direto: {len(json_string)} caracteres")
            
            # Limpar JSON
            json_string = json_string.replace("```json", '').replace("```", '').strip()
            print(f"[{job_id}] üßπ JSON limpo: {len(json_string)} caracteres")
            print(f"[{job_id}] üìÑ Primeiros 200 chars: {json_string[:200]}...")
            
            try:
                previous_step_result = json.loads(json_string)
                print(f"[{job_id}] ‚úÖ JSON parseado com sucesso")
                print(f"[{job_id}] üîç Chaves do JSON: {list(previous_step_result.keys()) if isinstance(previous_step_result, dict) else 'N/A'}")
            except json.JSONDecodeError as e:
                print(f"[{job_id}] ‚ùå ERRO ao parsear JSON: {e}")
                print(f"[{job_id}] üìÑ JSON problem√°tico: {json_string}")
                raise
            
            if i == 0: 
                resultado_refatoracao = previous_step_result
                print(f"[{job_id}] üì¶ Resultado refatora√ß√£o salvo")
            else: 
                resultado_agrupamento = previous_step_result
                print(f"[{job_id}] üì¶ Resultado agrupamento salvo")
        
        # ETAPA 2: Preenchimento
        job_info['status'] = 'populating_data'
        print(f"[{job_id}] üîß Iniciando preenchimento...")
        print(f"[{job_id}] üìä Refatora√ß√£o: {len(str(resultado_refatoracao))} chars")
        print(f"[{job_id}] üìä Agrupamento: {len(str(resultado_agrupamento))} chars")
        
        dados_preenchidos = preenchimento.main(json_agrupado=resultado_agrupamento, json_inicial=resultado_refatoracao)
        print(f"[{job_id}] ‚úÖ Preenchimento conclu√≠do")
        print(f"[{job_id}] üìä Dados preenchidos: {len(str(dados_preenchidos))} chars")
        print(f"[{job_id}] üîç Chaves preenchidas: {list(dados_preenchidos.keys()) if isinstance(dados_preenchidos, dict) else 'N/A'}")
        
        # ETAPA 3: Formata√ß√£o
        print(f"[{job_id}] üîÑ Iniciando formata√ß√£o...")
        dados_finais_formatados = {"resumo_geral": dados_preenchidos.get("resumo_geral", ""), "grupos": []}
        
        grupo_count = 0
        for nome_grupo, detalhes_pr in dados_preenchidos.items():
            if nome_grupo == "resumo_geral": 
                continue
            
            print(f"[{job_id}] üìù Processando grupo: {nome_grupo}")
            print(f"[{job_id}] üîç Detalhes: {type(detalhes_pr)} - {list(detalhes_pr.keys()) if isinstance(detalhes_pr, dict) else 'N/A'}")
            
            grupo_info = {
                "branch_sugerida": nome_grupo, 
                "titulo_pr": detalhes_pr.get("resumo_do_pr", ""), 
                "resumo_do_pr": detalhes_pr.get("descricao_do_pr", ""), 
                "conjunto_de_mudancas": detalhes_pr.get("conjunto_de_mudancas", [])
            }
            
            mudancas_count = len(grupo_info["conjunto_de_mudancas"])
            print(f"[{job_id}] üìä Grupo {nome_grupo}: {mudancas_count} mudan√ßas")
            
            dados_finais_formatados["grupos"].append(grupo_info)
            grupo_count += 1
        
        print(f"[{job_id}] ‚úÖ Formata√ß√£o conclu√≠da: {grupo_count} grupos")
        print(f"[{job_id}] üìä Grupos finais: {len(dados_finais_formatados.get('grupos', []))}")
        
        # VERIFICA√á√ÉO CR√çTICA
        if not dados_finais_formatados.get("grupos"): 
            print(f"[{job_id}] ‚ùå ERRO CR√çTICO: Nenhum grupo encontrado!")
            print(f"[{job_id}] üìÑ Dados finais: {dados_finais_formatados}")
            print(f"[{job_id}] üìÑ Dados preenchidos originais: {dados_preenchidos}")
            raise ValueError("Dados para commit vazios - nenhum grupo v√°lido encontrado")
        
        # ETAPA 4: Commit no GitHub
        job_info['status'] = 'committing_to_github'
        print(f"[{job_id}] üìù Iniciando commits no GitHub...")
        print(f"[{job_id}] üéØ Reposit√≥rio: {job_info['data']['repo_name']}")
        print(f"[{job_id}] üìä Enviando {len(dados_finais_formatados['grupos'])} grupos para commit")
        
        # Aqui √© onde o commit real deve acontecer
        commit_multiplas_branchs.processar_e_subir_mudancas_agrupadas(
            nome_repo=job_info['data']['repo_name'], 
            dados_agrupados=dados_finais_formatados
        )
        
        job_info['status'] = 'completed'
        print(f"[{job_id}] üéâ WORKFLOW CONCLU√çDO COM SUCESSO!")
        
    except Exception as e:
        print(f"[{job_id}] ‚ùå ERRO FATAL: {e}")
        print(f"[{job_id}] üìÑ Tipo do erro: {type(e)}")
        import traceback
        traceback.print_exc()
        
        jobs[job_id]['status'] = 'failed'
        jobs[job_id]['error'] = str(e)   

        # PATCH PARA mcp_server_fastapi.py - ADICIONE ESTA FUN√á√ÉO

# SUBSTITUA a fun√ß√£o run_workflow_task_REAL por esta vers√£o ROBUSTA

def run_workflow_task_REAL(job_id: str):
    """VERS√ÉO ROBUSTA - Funciona com qualquer estrutura de dados"""
    try:
        print(f"[{job_id}] üöÄ INICIANDO WORKFLOW REAL (VERS√ÉO ROBUSTA)")
        job_info = jobs[job_id]
        
        # DEBUG: Mostrar estrutura do job
        print(f"[{job_id}] üîç Estrutura do job: {list(job_info.keys())}")
        print(f"[{job_id}] üìÑ Conte√∫do: {job_info}")
        
        # BUSCAR DADOS DE FORMA ROBUSTA
        # Tentar diferentes estruturas de dados
        if 'data' in job_info:
            # Estrutura: job_info['data']['campo']
            data = job_info['data']
            repo_name = data.get('repo_name')
            branch_name = data.get('branch_name')
            analysis_type = data.get('original_analysis_type')
            analysis_report = data.get('analysis_report')
            instrucoes_extras = data.get('instrucoes_extras')
        else:
            # Estrutura: job_info['campo'] direto
            repo_name = job_info.get('repository') or job_info.get('repo_name')
            branch_name = job_info.get('branch') or job_info.get('branch_name')
            analysis_type = job_info.get('analysisType') or job_info.get('analysis_type')
            analysis_report = job_info.get('report') or job_info.get('analysis_report')
            instrucoes_extras = job_info.get('instructions') or job_info.get('instrucoes_extras')
        
        print(f"[{job_id}] üìä Dados extra√≠dos:")
        print(f"[{job_id}]   - Reposit√≥rio: {repo_name}")
        print(f"[{job_id}]   - Branch: {branch_name}")
        print(f"[{job_id}]   - Tipo: {analysis_type}")
        print(f"[{job_id}]   - Tem relat√≥rio: {bool(analysis_report)}")
        print(f"[{job_id}]   - Tem instru√ß√µes: {bool(instrucoes_extras)}")
        
        # VALIDAR DADOS ESSENCIAIS
        if not repo_name:
            raise ValueError("Nome do reposit√≥rio n√£o encontrado nos dados do job")
        
        if not analysis_type:
            raise ValueError("Tipo de an√°lise n√£o encontrado nos dados do job")
        
        # WORKFLOW SIMPLIFICADO FOCADO EM COMMITS
        workflow = WORKFLOW_REGISTRY.get(analysis_type)
        if not workflow:
            print(f"[{job_id}] ‚ö†Ô∏è Workflow n√£o encontrado para {analysis_type}, usando workflow padr√£o")
            # Criar workflow padr√£o
            workflow = {
                "steps": [
                    {"status_update": "refactoring_code", "agent_function": agente_revisor.main, "params": {"tipo_analise": "refatoracao"}},
                    {"status_update": "grouping_commits", "agent_function": agente_revisor.main, "params": {"tipo_analise": "agrupamento_design"}}
                ]
            }
        
        resultado_refatoracao, resultado_agrupamento = None, None
        previous_step_result = None
        
        # EXECUTAR AGENTES IA
        for i, step in enumerate(workflow['steps']):
            job_info['status'] = step['status_update']
            print(f"[{job_id}] ü§ñ Executando agente {i+1}: {step['params']['tipo_analise']}")
            
            agent_params = step['params'].copy()
            
            if i == 0:
                # Primeiro agente - usar dados do reposit√≥rio
                instrucoes_completas = analysis_report or "An√°lise de c√≥digo autom√°tica"
                if instrucoes_extras:
                    instrucoes_completas += f"\n\n--- INSTRU√á√ïES EXTRAS ---\n{instrucoes_extras}"
                
                agent_params.update({
                    'repositorio': repo_name,
                    'nome_branch': branch_name,
                    'instrucoes_extras': instrucoes_completas
                })
            else:
                # Agentes seguintes - usar resultado anterior
                agent_params['codigo'] = str(previous_step_result)
            
            try:
                print(f"[{job_id}] üìù Chamando agente com par√¢metros: {list(agent_params.keys())}")
                agent_response = step['agent_function'](**agent_params)
                
                # PROCESSAMENTO ROBUSTO DA RESPOSTA
                if not agent_response or 'resultado' not in agent_response:
                    raise ValueError(f"Resposta inv√°lida do agente: {agent_response}")
                
                resultado = agent_response['resultado']
                
                # Extrair JSON de diferentes formatos
                if isinstance(resultado, dict):
                    if 'reposta_final' in resultado:
                        json_string = resultado['reposta_final']
                    else:
                        json_string = str(resultado)
                else:
                    json_string = str(resultado)
                
                # Limpar e parsear
                json_string = json_string.replace("```json", '').replace("```", '').strip()
                previous_step_result = json.loads(json_string)
                
                if i == 0: 
                    resultado_refatoracao = previous_step_result
                    print(f"[{job_id}] ‚úÖ Refatora√ß√£o: {len(str(resultado_refatoracao))} chars")
                else: 
                    resultado_agrupamento = previous_step_result
                    print(f"[{job_id}] ‚úÖ Agrupamento: {len(str(resultado_agrupamento))} chars")
                    
            except Exception as e:
                print(f"[{job_id}] ‚ùå Erro no agente {i+1}: {e}")
                # Continuar mesmo com erro de agente
                if i == 0:
                    resultado_refatoracao = {"conjunto_de_mudancas": []}
                else:
                    resultado_agrupamento = {"grupos": []}
        
        # PREENCHIMENTO E FORMATA√á√ÉO
        job_info['status'] = 'populating_data'
        print(f"[{job_id}] üîß Processando dados para GitHub...")
        
        try:
            if resultado_refatoracao and resultado_agrupamento:
                dados_preenchidos = preenchimento.main(
                    json_agrupado=resultado_agrupamento, 
                    json_inicial=resultado_refatoracao
                )
            else:
                dados_preenchidos = {}
        except Exception as e:
            print(f"[{job_id}] ‚ö†Ô∏è Erro no preenchimento: {e}")
            dados_preenchidos = {}
        
        # CRIAR DADOS PARA GITHUB (sempre criar algo para testar)
        dados_finais_formatados = {
            "resumo_geral": "Refatora√ß√£o autom√°tica por IA", 
            "grupos": []
        }
        
        # Processar dados se existirem
        if dados_preenchidos:
            for nome_grupo, detalhes_pr in dados_preenchidos.items():
                if nome_grupo == "resumo_geral": 
                    continue
                if isinstance(detalhes_pr, dict):
                    grupo_info = {
                        "branch_sugerida": nome_grupo, 
                        "titulo_pr": detalhes_pr.get("resumo_do_pr", f"Refatora√ß√£o: {nome_grupo}"), 
                        "resumo_do_pr": detalhes_pr.get("descricao_do_pr", "Refatora√ß√£o autom√°tica"), 
                        "conjunto_de_mudancas": detalhes_pr.get("conjunto_de_mudancas", [])
                    }
                    dados_finais_formatados["grupos"].append(grupo_info)
        
        # SE N√ÉO H√Å GRUPOS, CRIAR UM DE TESTE
        if not dados_finais_formatados["grupos"]:
            print(f"[{job_id}] üìù Criando commit de teste para verificar integra√ß√£o GitHub")
            import time
            dados_finais_formatados["grupos"] = [{
                "branch_sugerida": f"ai-test-{job_id[:8]}",
                "titulo_pr": "Teste de Integra√ß√£o GitHub - Agentes IA",
                "resumo_do_pr": "Este √© um commit de teste para verificar se a integra√ß√£o com GitHub est√° funcionando",
                "conjunto_de_mudancas": [{
                    "caminho_do_arquivo": "AI_INTEGRATION_TEST.md",
                    "status": "CRIADO",
                    "conteudo": f"""# Teste de Integra√ß√£o - Agentes IA

## Informa√ß√µes do Job
- **Job ID**: {job_id}
- **Reposit√≥rio**: {repo_name}
- **Tipo de An√°lise**: {analysis_type}
- **Data/Hora**: {time.strftime('%Y-%m-%d %H:%M:%S')}
- **Branch**: {branch_name or 'main'}

## Status da Integra√ß√£o
‚úÖ **Agentes IA**: Funcionando
‚úÖ **Backend FastAPI**: Funcionando  
‚úÖ **Workflow**: Executado
‚úÖ **GitHub API**: Testando agora...

## Pr√≥ximos Passos
Se voc√™ est√° vendo este arquivo no GitHub, significa que:
1. ‚úÖ A autentica√ß√£o GitHub est√° funcionando
2. ‚úÖ O sistema consegue criar branches
3. ‚úÖ O sistema consegue fazer commits
4. ‚úÖ O sistema consegue criar Pull Requests

**Status**: Integra√ß√£o funcionando perfeitamente! üéâ
""",
                    "justificativa": "Arquivo de teste criado para verificar integra√ß√£o GitHub"
                }]
            }]
        
        print(f"[{job_id}] üì¶ Grupos finais: {len(dados_finais_formatados['grupos'])}")
        
        # VERIFICAR TOKEN GITHUB
        import os
        github_token = os.getenv('GITHUB_TOKEN')
        if not github_token:
            raise ValueError("‚ùå GITHUB_TOKEN n√£o configurado nas vari√°veis de ambiente")
        
        print(f"[{job_id}] ‚úÖ Token GitHub encontrado")
        
        # EXECUTAR COMMITS REAIS
        job_info['status'] = 'committing_to_github'
        print(f"[{job_id}] üìù EXECUTANDO COMMITS REAIS NO GITHUB...")
        print(f"[{job_id}] üéØ Reposit√≥rio: {repo_name}")
        print(f"[{job_id}] üì¶ Grupos: {len(dados_finais_formatados['grupos'])}")
        
        commit_multiplas_branchs.processar_e_subir_mudancas_agrupadas(
            nome_repo=repo_name, 
            dados_agrupados=dados_finais_formatados
        )
        
        job_info['status'] = 'completed'
        print(f"[{job_id}] üéâ WORKFLOW CONCLU√çDO - VERIFIQUE SEU GITHUB!")
        print(f"[{job_id}] üîó https://github.com/{repo_name}")
        
    except Exception as e:
        print(f"[{job_id}] ‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        
        jobs[job_id]['status'] = 'failed'
        jobs[job_id]['error'] = str(e)