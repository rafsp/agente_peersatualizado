# mcp_server_fastapi.py - BACKEND COM AGENTES REAIS (SEM SIMULA√á√ÉO)

import json
import uuid
import time
import asyncio
import threading
from typing import Optional, Literal, Dict, Any
from fastapi import FastAPI, BackgroundTasks, HTTPException, Path
from pydantic import BaseModel, Field
from fastapi.middleware.cors import CORSMiddleware
import os
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# IMPORTS DOS AGENTES REAIS - OBRIGAT√ìRIOS
try:
    from agents import agente_revisor
    from tools import preenchimento, commit_multiplas_branchs
    AGENTS_AVAILABLE = True
    print("‚úÖ Agentes reais carregados com sucesso")
    
    # Verificar depend√™ncias cr√≠ticas
    import openai
    import github
    print("‚úÖ Depend√™ncias OpenAI e GitHub dispon√≠veis")
    
    # Verificar vari√°veis de ambiente
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ö†Ô∏è  OPENAI_API_KEY n√£o encontrada no .env")
        AGENTS_AVAILABLE = False
    if not os.getenv('GITHUB_TOKEN'):
        print("‚ö†Ô∏è  GITHUB_TOKEN n√£o encontrada no .env")
        AGENTS_AVAILABLE = False
        
    if AGENTS_AVAILABLE:
        print("‚úÖ Configura√ß√£o completa para agentes reais")
    else:
        print("‚ùå Configura√ß√£o incompleta - verifique .env")
        
except ImportError as e:
    print(f"‚ùå ERRO CR√çTICO: Agentes n√£o encontrados: {e}")
    print("‚ùå Execute: pip install PyGithub openai python-dotenv")
    print("‚ùå Verifique se os arquivos dos agentes existem:")
    print("   - agents/agente_revisor.py")
    print("   - tools/github_reader.py") 
    print("   - tools/revisor_geral.py")
    AGENTS_AVAILABLE = False
    exit(1)  # PARAR EXECU√á√ÉO - AGENTES S√ÉO OBRIGAT√ìRIOS

# --- Modelos de Dados ---
class StartAnalysisRequest(BaseModel):
    repo_name: str = Field(..., description="Nome do reposit√≥rio GitHub (formato: owner/repo)")
    analysis_type: Literal["design", "relatorio_teste_unitario"] = Field(..., description="Tipo de an√°lise")
    branch_name: Optional[str] = Field(None, description="Branch espec√≠fica (opcional)")
    instrucoes_extras: Optional[str] = Field(None, description="Instru√ß√µes adicionais")

class UpdateJobRequest(BaseModel):
    job_id: str = Field(..., description="ID do job")
    action: Literal["approve", "reject"] = Field(..., description="A√ß√£o a ser executada")

class JobStatusResponse(BaseModel):
    job_id: str
    status: str
    message: str
    progress: int
    error_details: Optional[str] = None
    last_updated: float

class StartAnalysisResponse(BaseModel):
    job_id: str
    report: str
    status: str

# --- Configura√ß√£o do FastAPI ---
app = FastAPI(
    title="Agentes Peers - Backend com IA Real",
    description="Sistema de an√°lise de c√≥digo com IA multi-agentes (SEM SIMULA√á√ÉO)",
    version="3.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configura√ß√£o CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:3001",
        "https://your-frontend-domain.com"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Armazenamento em mem√≥ria dos jobs
jobs: Dict[str, Dict[str, Any]] = {}

# --- WORKFLOW REGISTRY COM AGENTES REAIS ---
WORKFLOW_REGISTRY = {
    "design": {
        "description": "An√°lise de design e refatora√ß√£o usando agentes reais",
        "agent_analysis_type": "design",  # Tipo para an√°lise inicial
        "steps": [
            {
                "status": "refactoring_code", 
                "message": "Executando refatora√ß√£o com IA...", 
                "agent_type": "refatoracao",
                "duration": 15
            },
            {
                "status": "grouping_commits", 
                "message": "Organizando commits por tema...", 
                "agent_type": "agrupamento_design",
                "duration": 8
            },
            {
                "status": "populating_data", 
                "message": "Aplicando mudan√ßas no c√≥digo...", 
                "agent_type": None,  # Usar ferramenta de preenchimento
                "duration": 10
            },
            {
                "status": "committing_to_github", 
                "message": "Criando commits organizados...", 
                "agent_type": None,  # Usar ferramenta de commit
                "duration": 12
            }
        ]
    },
    "relatorio_teste_unitario": {
        "description": "Gera√ß√£o de testes unit√°rios usando agentes reais",
        "agent_analysis_type": "design",  # An√°lise inicial para entender c√≥digo
        "steps": [
            {
                "status": "writing_unit_tests", 
                "message": "Gerando testes unit√°rios com IA...", 
                "agent_type": "escrever_testes",
                "duration": 20
            },
            {
                "status": "grouping_tests", 
                "message": "Organizando estrutura de testes...", 
                "agent_type": "agrupamento_testes",
                "duration": 8
            },
            {
                "status": "populating_data", 
                "message": "Aplicando testes no projeto...", 
                "agent_type": None,
                "duration": 10
            },
            {
                "status": "committing_to_github", 
                "message": "Commitando testes organizados...", 
                "agent_type": None,
                "duration": 10
            }
        ]
    }
}

# --- Fun√ß√µes dos Agentes Reais ---

async def execute_real_analysis_step(job_id: str, step: Dict[str, Any], job_data: Dict[str, Any]) -> Dict[str, Any]:
    """Executa uma etapa real da an√°lise usando os agentes"""
    try:
        print(f"[{job_id}] Executando etapa: {step['status']}")
        
        if step.get("agent_type"):
            # Executar agente real
            print(f"[{job_id}] Chamando agente: {step['agent_type']}")
            
            resultado = agente_revisor.main(
                tipo_analise=step["agent_type"],
                repositorio=job_data["repo_name"],
                nome_branch=job_data.get("branch_name"),
                instrucoes_extras=job_data.get("instrucoes_extras", "")
            )
            
            print(f"[{job_id}] ‚úÖ Agente executado com sucesso")
            return {
                "status": "success",
                "result": resultado,
                "message": f"Etapa {step['status']} conclu√≠da com agente {step['agent_type']}"
            }
            
        else:
            # Executar ferramenta espec√≠fica
            if step["status"] == "populating_data":
                print(f"[{job_id}] Aplicando mudan√ßas com ferramenta de preenchimento")
                resultado = preenchimento.main()
                
            elif step["status"] == "committing_to_github":
                print(f"[{job_id}] Criando commits com ferramenta de commit")
                resultado = commit_multiplas_branchs.main()
                
            else:
                resultado = {"status": "completed", "message": "Etapa processada"}
            
            print(f"[{job_id}] ‚úÖ Ferramenta executada com sucesso")
            return {
                "status": "success", 
                "result": resultado,
                "message": f"Etapa {step['status']} conclu√≠da"
            }
            
    except Exception as e:
        print(f"[{job_id}] ‚ùå Erro na etapa {step['status']}: {e}")
        return {
            "status": "error",
            "error": str(e),
            "message": f"Falha na etapa {step['status']}"
        }

async def execute_full_workflow(job_id: str):
    """Executa workflow completo com agentes reais"""
    if not AGENTS_AVAILABLE:
        print(f"[{job_id}] ‚ùå Agentes n√£o dispon√≠veis")
        jobs[job_id].update({
            "status": "failed",
            "message": "Agentes n√£o dispon√≠veis - configure .env",
            "progress": 0,
            "last_updated": time.time()
        })
        return
    
    try:
        job = jobs.get(job_id)
        if not job:
            print(f"[{job_id}] ‚ùå Job n√£o encontrado")
            return
        
        workflow = WORKFLOW_REGISTRY.get(job["analysis_type"])
        if not workflow:
            raise ValueError(f"Workflow n√£o encontrado: {job['analysis_type']}")
        
        print(f"[{job_id}] üöÄ Iniciando workflow: {workflow['description']}")
        
        total_steps = len(workflow["steps"])
        progress_per_step = 75 / total_steps  # 75% restante dividido pelas etapas
        current_progress = 25  # Come√ßa em 25% ap√≥s aprova√ß√£o
        
        # Executar cada etapa
        for i, step in enumerate(workflow["steps"]):
            if job_id not in jobs:
                print(f"[{job_id}] ‚ö†Ô∏è Job removido durante execu√ß√£o")
                break
            
            # Atualizar status
            current_progress += progress_per_step
            jobs[job_id].update({
                "status": step["status"],
                "message": step["message"],
                "progress": int(current_progress),
                "last_updated": time.time()
            })
            
            print(f"[{job_id}] {step['status']}: {step['message']} ({int(current_progress)}%)")
            
            # Executar etapa real
            resultado_etapa = await execute_real_analysis_step(job_id, step, job)
            
            if resultado_etapa["status"] == "error":
                # Falha na etapa
                jobs[job_id].update({
                    "status": "failed",
                    "message": f"Falha: {resultado_etapa['message']}",
                    "progress": int(current_progress),
                    "error_details": resultado_etapa.get("error"),
                    "last_updated": time.time()
                })
                print(f"[{job_id}] ‚ùå Workflow falhou na etapa {step['status']}")
                return
            
            # Simular tempo de processamento real
            await asyncio.sleep(min(step["duration"], 5))  # M√°ximo 5s por etapa para demo
        
        # Finalizar com sucesso
        if job_id in jobs:
            jobs[job_id].update({
                "status": "completed",
                "message": "An√°lise conclu√≠da com agentes reais!",
                "progress": 100,
                "last_updated": time.time()
            })
            print(f"[{job_id}] ‚úÖ Workflow conclu√≠do com sucesso")
        
    except Exception as e:
        print(f"[{job_id}] ‚ùå Erro no workflow: {e}")
        if job_id in jobs:
            jobs[job_id].update({
                "status": "failed",
                "message": f"Erro na execu√ß√£o: {str(e)}",
                "progress": 0,
                "error_details": str(e),
                "last_updated": time.time()
            })

def generate_initial_report(repo_name: str, analysis_type: str, instrucoes_extras: str = "") -> str:
    """Gera relat√≥rio inicial usando agente real"""
    if not AGENTS_AVAILABLE:
        return "‚ùå Agentes n√£o dispon√≠veis. Configure OPENAI_API_KEY e GITHUB_TOKEN no .env"
    
    try:
        print(f"ü§ñ Gerando relat√≥rio inicial para {repo_name} (tipo: {analysis_type})")
        
        # Usar agente real para an√°lise inicial
        workflow = WORKFLOW_REGISTRY.get(analysis_type)
        agent_type = workflow.get("agent_analysis_type", "design")
        
        resultado = agente_revisor.main(
            tipo_analise=agent_type,
            repositorio=repo_name,
            instrucoes_extras=instrucoes_extras or "An√°lise inicial para aprova√ß√£o"
        )
        
        # Extrair relat√≥rio do resultado
        if resultado and "resultado" in resultado:
            if isinstance(resultado["resultado"], dict) and "reposta_final" in resultado["resultado"]:
                return resultado["resultado"]["reposta_final"]
            elif isinstance(resultado["resultado"], str):
                return resultado["resultado"]
        
        return "Relat√≥rio gerado com sucesso. C√≥digo analisado e pronto para processamento."
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rio inicial: {e}")
        return f"‚ùå Erro na an√°lise inicial: {str(e)}\n\nVerifique:\n- OPENAI_API_KEY no .env\n- GITHUB_TOKEN no .env\n- Acesso ao reposit√≥rio {repo_name}"

# --- Endpoints da API ---

@app.get("/")
async def root():
    return {
        "message": "Backend Agentes Peers com IA Real funcionando!",
        "version": "3.0.0",
        "status": "ok",
        "agents_status": "real_agents" if AGENTS_AVAILABLE else "no_agents",
        "environment": os.getenv("ENVIRONMENT", "development")
    }

@app.get("/health")
async def health_check():
    status = "healthy" if AGENTS_AVAILABLE else "unhealthy"
    return {
        "status": status,
        "message": "Backend funcionando com agentes reais" if AGENTS_AVAILABLE else "Agentes n√£o dispon√≠veis",
        "environment": os.getenv("ENVIRONMENT", "development"),
        "agents_available": AGENTS_AVAILABLE,
        "openai_configured": bool(os.getenv('OPENAI_API_KEY')),
        "github_configured": bool(os.getenv('GITHUB_TOKEN'))
    }

@app.post("/start-analysis", response_model=StartAnalysisResponse)
async def start_analysis(request: StartAnalysisRequest):
    """Inicia uma nova an√°lise usando agentes reais"""
    try:
        # Validar entrada
        if not request.repo_name.strip():
            raise HTTPException(status_code=400, detail="Nome do reposit√≥rio √© obrigat√≥rio")
        
        if not AGENTS_AVAILABLE:
            raise HTTPException(
                status_code=503, 
                detail="Agentes n√£o dispon√≠veis. Configure OPENAI_API_KEY e GITHUB_TOKEN no .env"
            )
        
        # Criar novo job
        job_id = str(uuid.uuid4())
        
        print(f"üéØ Iniciando an√°lise real: {job_id} - {request.analysis_type} - {request.repo_name}")
        
        # Gerar relat√≥rio inicial usando agente real
        report = generate_initial_report(
            request.repo_name, 
            request.analysis_type, 
            request.instrucoes_extras
        )
        
        # Criar job no armazenamento
        jobs[job_id] = {
            "job_id": job_id,
            "repo_name": request.repo_name,
            "analysis_type": request.analysis_type,
            "branch_name": request.branch_name,
            "instrucoes_extras": request.instrucoes_extras,
            "status": "pending_approval",
            "message": "Relat√≥rio gerado com IA real. Aguardando aprova√ß√£o...",
            "progress": 10,
            "report": report,
            "created_at": time.time(),
            "last_updated": time.time()
        }
        
        print(f"‚úÖ An√°lise criada: {job_id} - {request.analysis_type} - {request.repo_name}")
        
        return StartAnalysisResponse(
            job_id=job_id,
            report=report,
            status="pending_approval"
        )
        
    except Exception as e:
        print(f"‚ùå Erro ao criar an√°lise: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/status/{job_id}", response_model=JobStatusResponse)
async def get_job_status(job_id: str = Path(..., description="ID do job")):
    """Obt√©m o status atual de um job"""
    if job_id not in jobs:
        raise HTTPException(status_code=404, detail="Job n√£o encontrado")
    
    job = jobs[job_id]
    return JobStatusResponse(
        job_id=job["job_id"],
        status=job["status"],
        message=job["message"],
        progress=job["progress"],
        error_details=job.get("error_details"),
        last_updated=job["last_updated"]
    )

@app.post("/update-job-status")
async def update_job_status(request: UpdateJobRequest, background_tasks: BackgroundTasks):
    """Aprova ou rejeita um job para execu√ß√£o com agentes reais"""
    if request.job_id not in jobs:
        raise HTTPException(status_code=404, detail="Job n√£o encontrado")
    
    job = jobs[request.job_id]
    
    if request.action == "approve":
        if not AGENTS_AVAILABLE:
            raise HTTPException(
                status_code=503, 
                detail="Agentes n√£o dispon√≠veis para execu√ß√£o"
            )
        
        # Atualizar status para aprovado
        jobs[request.job_id].update({
            "status": "approved",
            "message": "An√°lise aprovada! Iniciando processamento com agentes reais...",
            "progress": 25,
            "last_updated": time.time()
        })
        
        # Iniciar execu√ß√£o real em background
        background_tasks.add_task(execute_full_workflow, request.job_id)
        
        print(f"‚úÖ Job aprovado para execu√ß√£o real: {request.job_id}")
        
        return {
            "job_id": request.job_id,
            "status": "approved",
            "message": "An√°lise aprovada e iniciada com agentes reais"
        }
    
    elif request.action == "reject":
        jobs[request.job_id].update({
            "status": "rejected",
            "message": "An√°lise rejeitada pelo usu√°rio",
            "progress": 0,
            "last_updated": time.time()
        })
        
        print(f"‚ùå Job rejeitado: {request.job_id}")
        
        return {
            "job_id": request.job_id,
            "status": "rejected",
            "message": "An√°lise rejeitada"
        }

@app.get("/jobs")
async def list_jobs():
    """Lista todos os jobs"""
    return {
        "jobs": list(jobs.values()),
        "total": len(jobs),
        "agents_available": AGENTS_AVAILABLE
    }

@app.delete("/jobs/{job_id}")
async def delete_job(job_id: str):
    """Remove um job"""
    if job_id not in jobs:
        raise HTTPException(status_code=404, detail="Job n√£o encontrado")
    
    del jobs[job_id]
    print(f"üóëÔ∏è Job removido: {job_id}")
    return {"message": "Job removido com sucesso"}

# --- Executar Servidor ---
if __name__ == "__main__":
    if not AGENTS_AVAILABLE:
        print("‚ùå ERRO: N√£o √© poss√≠vel iniciar sem agentes configurados!")
        print("‚ùå Configure .env com OPENAI_API_KEY e GITHUB_TOKEN")
        exit(1)
        
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000, reload=True)